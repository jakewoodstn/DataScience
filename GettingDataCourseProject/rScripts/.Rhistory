q()
library(datasets)
data(iris)
?iris
iris
fac=c('virginica','other')
split(iris,fac)
fac = iris[,6]
fac = iris[6]
iris
iris[6]
iris[5-
;
iris[5]
fac=iris[5]
split(iris,fac)
s.l=iris[1]
tapply(s.l,mean,fac)
tapply(s.l,fac,mean)
s.l
fac
trace
trace()
tapply(s.l,fac)
length(s.l)
s.l
vector(s.l)
split(s.l,fac)
lapply(split(s.l,fac),mean)
split(s.l,fac)
sapply(split(s.l,fac),mean)
lapply(iris,colmeans)
lapply(iris,colMeans)
iris
clear
cls
clc
fuck you
vector(iris[0])
vector(iris[1])
x
s.l
lapply(s.l,mean)
lapply(split(s.l,x),mean)
lapply(split(s.l,fac),mean)
s<-split(s.l,fac)
s
lapply(s[[1]],mean)
s[,1]
lapply(s,function(x) colMeans(x[,c("Sepal.length")]))
lapply(s,function(x) colMeans(x[,c("Sepal.Length")]))
lapply(s,function(x) mean(x[,c("Sepal.Length")]))
s
s[,'Sepal.Length']
s[,"Sepal.Length"]
s[,c("Sepal.Length")]
mean(s[,c("Sepal.Length")])
mean(s[[1]][,c("Sepal.Length")])
s[[1]]
v=s[[1]]
v
v[,c("Sepal.Length")]
mean(v)
v[1]
v[2]
v[,c("Sepal.Length")]
mean(v[,c("Sepal.Length")])
iris[,1:4]
rowMeans(iris[,1:4])
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
mtcars
mtcars$mpg
mtcars$cyl
tapply(mtcars$hp,mtcars$cyl,mean)
hpdiff<-ans
answer
hpdiff<-tapply(mtcars$hp,mtcars$cyl,mean)
hpdiff
hpdiff[3]-hpdiff[1]
debug(ls)
ls
ls()
exit
quit
q
jkl;jlk
why
q
qq
q
q
q
q
q
q
p
w
e
r
t
t
hpdiff
ls
ls
debug
?
?
hello?
debog()
debug()
ls
ls()
ls()
Q
fac
clear
?debug
?debug
undebug(ls)
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$species,mean)
length
length(iris$Sepal.Length)
tapply(iris$species)
?iris
tapply(iris$Species)
length(iris$Specieis)
length(iris$Species)
tapply(iris$Sepal.Length, iris$Species,mean)
data(mtcars)
hpdiff<-sapply(split(mtcars$hp,mtcars$cyl),mean)
hpdiff
hpdiff$3
hpdiff[3]
hpdiff[3]-hpdiff[1]
?<-
?<<-
a = matrix(1:2,3:4)
a
a = matrix(1:2)
a
a = matrix(1:2,3)
a
a = matrix(1,2,3)
a
a[2]
a[,2]
a[,2]=c(2,2)
a
a[,2]=c(2,3)
a[,3]=c(3.5)
a[3,]=c(1,1,1)
b=a[,1:2]
b
solve(b)
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix(x)
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
b
cacheSolve(b)
is.list(x)
is.list(b)
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
b
makeCacheMatrix(b)
c<-makeCacheMatrix(b)
c
c$get
c$get()
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
d<-c$get()
solve(d)
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(c)
cachesolve(b)
cacheSolve(b)
cacheSolve(b)
mat
x
x$get()
debugSource('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
q
debugSource('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
debugSource('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
b
cacheSolve(b)
cacheSolve(b)
is.list(x)
repx$get
debugSource('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
repx$get
repx$get()
repx$get()
repx
debugSource('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
repx$get()
x$get()
x$get()
clear
clear
rm(list=ls)
rm(list=ls())
a = [1,2;3,4]
?matrix
matrix(1:4,2,2)
a<-matrix(1:4,2,2)
solve(a)
b<-a*3
b
solve(b)
solve(a*2)
solve(a*4)
solve(a*0.5)
rm(b)
b<-makeCacheMatrix(a)
debugSource('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
b<-makeCacheMatrix(a)
b
cacheSolve(b)
cacheSolve(b)
cacheSolve(a)
cacheSolve(a)
x
x$get()
cacheSolve(b)
debugSource('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
rm(b)
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
b<-makeCacheMatrix(a)
cacheSolve(b)
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
b[[get]]
b[[get()]]
b[[get]]
length(b)
length(a)
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
b.set(b)
b$set(b)
b
b$getInv
b$getInv()
cacheMatrix(b)
cacheSolve(b)
if(1==2) 0
if(1==2) FALSE
if(1==1) FALSE
is.list(b)
is.list(b) || 1==2
cacheSolve(b)
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
b
b$get()
clear
rm(b)
b=makeCacheMatrix(a)
b$get()
cacheSolve(b)
cacheSolve(b)
cacheSolve(a)
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
?message
source('~/datasciencecoursera2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
xtest=read.table("DataScience/GettingDataCourseProject//rScripts//X_test.txt",sep=" ")
xtest=read.table("DataScience/GettingDataCourseProject//rScripts//X_test.txt",sep="")
q()
rm(list=ls())
setwd("DataScience/GettingDataCourseProject/rScripts/")
ls
ls()
dir()
Xtest=read.table("X_test.txt")
ytest=read.table("y_test.txt")
test = cbind(Xtest,ytest)
file.exists
file.exists(
"X_test.txt")
?if
()
?if{}
?control
?for
l
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
?die
?error
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
run_analysis
run_analysis()
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
run_analysis()
file.exists("X_test.txt")
& file.exists("X_train.txt")
& file.exists("y_test.txt")
& file.exists("y_train.txt")
file.exists("X_test.txt")
&& file.exists("X_train.txt")
& file.exists("y_test.txt")
& file.exists("y_train.txt")
file.exists("X_test.txt")
&& file.exists("X_train.txt")
file.exists("X_test.txt") && file.exists("X_train.txt")
file.exists("X_test.txt") & file.exists("X_train.txt")
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
run_analysis()
file.exists("X_test.txt") & file.exists("X_train.txt") & file.exists("y_test.txt") & file.exists("y_train.txt")
~(file.exists("X_test.txt") & file.exists("X_train.txt") & file.exists("y_test.txt") & file.exists("y_train.txt"))
!(file.exists("X_test.txt") & file.exists("X_train.txt") & file.exists("y_test.txt") & file.exists("y_train.txt"))
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
run_analysis()
ad<-run_analysis()
rbind(cbind(read.table("X_test.txt"),read.table("y_test.txt")),cbind(read.table("X_train.txt"),read.table("y_train.txt")))
ss<-rbind(cbind(read.table("X_test.txt"),read.table("y_test.txt")),cbind(read.table("X_train.txt"),read.table("y_train.txt")))
ss<-rbind(cbind(read.table("X_test.txt"),read.table("y_test.txt")),cbind(read.table("subject_train.txt"),read.table("X_train.txt"),read.table("y_train.txt")))
ss<-rbind(cbind(read.table("subject_test.txt"),read.table("X_test.txt"),read.table("y_test.txt")),cbind(read.table("subject_train.txt"),read.table("X_train.txt"),read.table("y_train.txt")))
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
run_analysis()
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
ss<-run_analysis()
rm(list=ls())
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
ss<-run_analysis()
?mutate
library(dplyr)
ss<-run_analysis()
ss
head(ss)
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
ss<-run_analysis()
head(ss)
names(ss)
read.table('newFeatures.txt')
names(ss)<-read.table('newFeatures.txt')
names(ss)
?read.table
z=read.table('newFeatures.txt')
names(ss)<-z
names(ss)
z
names(ss)<-z[,1]
names(ss)
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
rm(list=ls())
ss<-run_analysis()
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
ss<-run_analysis()
?split
names(ss)
ddply
library('dplyr')
install('dplyr')
install.package('dplyr')
install.packages('dplyr')
library('dplyr')
source('~/DataScience/GettingDataCourseProject/rScripts/run_analysis.R')
ddply
plyr
library(plyr)
ddply
